---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Charts: Release"

concurrency: helm-release

on:
  workflow_dispatch:
    inputs:
      charts:
        description: "JSON encoded list of charts to release"
        required: true
        type: string
        default: "[]"
  push:
    branches:
      - main
    paths:
      - "charts/**"

jobs:
  prepare:
    name: Prepare data required for workflow
    runs-on: ubuntu-22.04
    outputs:
      applicationChartsToRelease: ${{ steps.filtered-charts.outputs.applicationChartsToRelease }}
      otherChartsToRelease: ${{ steps.filtered-charts.outputs.otherChartsToRelease }}
    steps:
      # ----------------------------
      # Setup
      # ----------------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Grab repository configuration
        id: repo-config
        shell: bash
        run: |
          echo "config=$(yq '.' '.ci/repo-config.yaml' -o json -I=0)" >> "$GITHUB_OUTPUT"

      - name: Get changed application charts
        id: changed-application-charts
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: tj-actions/changed-files@v45
        with:
          matrix: true
          path: charts
          dir_names: true
          dir_names_max_depth: 2
          files: |
            apps/**

      - name: Get changed charts
        id: changed-charts
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: tj-actions/changed-files@v45
        with:
          matrix: true
          path: charts
          dir_names: true
          dir_names_max_depth: 2
          files_ignore: |
            apps/**

      - name: Get specified charts
        id: specified-charts
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let input = '${{ inputs.charts }}';
            let cwd = process.cwd();

            let tmpCharts = []
            if (input === '[]') {
              console.log("Empty charts input, scanning for charts in repository");
              const globber = await glob.create('charts/*/*', { implicitDescendants: false });
              for await (const file of globber.globGenerator()) {
                if (fs.lstatSync(file).isDirectory()) {
                  relativePath = file.slice(`${cwd}/charts/`.length);
                  tmpCharts.push(relativePath);
                }
              }
            } else {
              tmpCharts = JSON.parse(input);
              tmpCharts.forEach(function (chart) {
                const fullPath = `${cwd}/charts/${chart}`;
                if (!fs.existsSync(fullPath)) {
                  core.setFailed(`Chart ${chart} does not exist in repository`);
                  process.exit(1);
                }
                if (!fs.lstatSync(fullPath).isDirectory()) {
                  core.setFailed(`${chart} is not a valid directory`);
                  process.exit(1);
                }
              });
            }

            let applicationCharts = tmpCharts.filter(chart => chart.startsWith('apps/'));
            core.setOutput('applicationChartsToRelease', JSON.stringify(applicationCharts));

      - name: Filter out excluded charts
        id: filtered-charts
        uses: actions/github-script@v7
        with:
          script: |
            let applicationChartsInput = ${{ github.event_name == 'workflow_dispatch' && steps.specified-charts.outputs.applicationChartsToRelease || steps.changed-application-charts.outputs.all_changed_files }};
            let excludedFromRelease = ${{ steps.repo-config.outputs.config }}['excluded-charts-release'];

            let applicationCharts = applicationChartsInput.filter(item => excludedFromRelease.indexOf(item) < 0);
            core.setOutput('applicationChartsToRelease', JSON.stringify(applicationCharts));

  release-application-charts:
    name: Release application charts
    needs:
      - prepare
    if: |-
      ${{
        !cancelled() &&
        !contains(needs.*.result, 'failure') &&
        (needs.prepare.outputs.applicationChartsToRelease != '[]' && needs.prepare.outputs.applicationChartsToRelease != '')
      }}
    permissions:
      pages: write
      id-token: write
      contents: write
      packages: write
    strategy:
      matrix:
        chart: ${{ fromJSON(needs.prepare.outputs.applicationChartsToRelease) }}
      fail-fast: false
      max-parallel: 1
    uses: ./.github/workflows/chart-release-steps.yaml
    with:
      chart: ${{ matrix.chart }}
      createGithubRelease: true
      publishToGhPages: false
      publishToOciRegistry: true
      deployGhPages: false
